# Cloud Build configuration for deploying Web Scraper to Cloud Run
# This file is used when connecting your GitHub repository to Cloud Build
# for automatic deployments to Cloud Run

# Substitution variables that can be configured in Cloud Build triggers
# SECURITY NOTE: These are not sensitive values but should be configurable per environment
substitutions:
  _PROJECT_ID: 'sports-booking-465210'           # Can be overridden in trigger settings
  _REGION: 'us-central1'                   # Cloud Run region
  _SERVICE_NAME: 'web-scraper'             # Cloud Run service name
  _BUCKET_NAME: 'sports-booking-webscraper'      # Can be overridden for different environments
  _SERVICE_ACCOUNT: 'scraper-service@${_PROJECT_ID}.iam.gserviceaccount.com'
  _IMAGE_NAME: 'web-scraper'
  _REGISTRY: 'gcr.io'                      # Can also use Artifact Registry
  _MEMORY: '512Mi'                        # Memory allocation for Cloud Run
  _CPU: '1'                               # CPU allocation
  _CONCURRENCY: '1'                      # Max concurrent requests per instance
  _TIMEOUT: '900'                         # Request timeout in seconds (15 minutes)
  _MAX_INSTANCES: '1'                    # Maximum number of instances

steps:
  # Step 1: Run tests to ensure code quality before deployment
  - name: 'python:3.11-slim'
    id: 'test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing dependencies and running tests..."
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
        echo "Running test suite..."
        # Set test environment variables
        export BUCKET_NAME="test-bucket"
        export PROJECT_ID="${_PROJECT_ID}"
        pytest tests/ --cov=main --cov-report=term-missing
        
        echo "Running syntax check..."
        python -m py_compile main.py
        
        echo "✓ All tests passed, proceeding with deployment"

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build'
    args:
      - 'build'
      - '-t'
      - '${_REGISTRY}/${_PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA}'
      - '-t'
      - '${_REGISTRY}/${_PROJECT_ID}/${_IMAGE_NAME}:latest'
      - '.'
    waitFor: ['test']

  # Step 3: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push'
    args:
      - 'push'
      - '${_REGISTRY}/${_PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA}'
    waitFor: ['build']

  # Step 4: Push the latest tag
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args:
      - 'push'
      - '${_REGISTRY}/${_PROJECT_ID}/${_IMAGE_NAME}:latest'
    waitFor: ['build']

  # Step 5: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGISTRY}/${_PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--service-account=${_SERVICE_ACCOUNT}'
      - '--set-env-vars=BUCKET_NAME=${_BUCKET_NAME},PROJECT_ID=${_PROJECT_ID}'  # Pass as env vars
      - '--memory=${_MEMORY}'
      - '--cpu=${_CPU}'
      - '--concurrency=${_CONCURRENCY}'
      - '--timeout=${_TIMEOUT}'
      - '--max-instances=${_MAX_INSTANCES}'
      - '--min-instances=0'
      - '--port=8080'
      - '--execution-environment=gen2'
    waitFor: ['push', 'push-latest']

  # Step 6: Verify deployment with health check
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --format='value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f "$SERVICE_URL/health" || exit 1
        
        echo "✓ Health check passed - deployment successful!"
        echo "Service is available at: $SERVICE_URL"
    waitFor: ['deploy']

# Configuration for the build process
options:
  # Use a larger machine for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Increase disk size if needed for large dependencies
  diskSizeGb: 100
  
  # Enable detailed logging
  logging: CLOUD_LOGGING_ONLY
  
  # Set substitution option
  substitution_option: 'ALLOW_LOOSE'

# Timeout for the entire build process (20 minutes)
timeout: '1200s'

# Images to be pushed to Container Registry
images:
  - '${_REGISTRY}/${_PROJECT_ID}/${_IMAGE_NAME}:${COMMIT_SHA}'
  - '${_REGISTRY}/${_PROJECT_ID}/${_IMAGE_NAME}:latest'

# Tags for organizing builds
tags:
  - 'web-scraper'
  - 'cloud-run'
  - 'python'
  - 'scraper' 